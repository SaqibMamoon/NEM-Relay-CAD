//****************************************************************************//
// Verilog models generated by SiliconSmart M-2017.03-2 build date: Apr 12, 2017 14:36:58. (SMSC-2) //
// Siliconsmart Path: /cad/synopsys/SiliconSmart/M-2017.03-2/linux64/bin/siliconsmart //
// Host Name: r6cad-tsmc40r.stanford.edu, User Name: akashl, PID: 27423       //
// Directory: /home/akashl/NEM-Relay-CAD/liberty                              //
//                                                                            //
// File generated on Fri Oct 30 21:00:00 PDT 2020. (SMSC-3)                   //
//****************************************************************************//


`timescale 1ns/1ps



`celldefine
module nem_ohmux_invd0_10i_1b( I0_0, I1_0, I2_0, I3_0, I4_0, I5_0, I6_0, I7_0, I8_0, I9_0, S0, S1, S2, S3, S4, S5, S6, S7, S8, S9, ZN_0 );
input I0_0, I1_0, I2_0, I3_0, I4_0, I5_0, I6_0, I7_0, I8_0, I9_0, S0, S1, S2, S3, S4, S5, S6, S7, S8, S9;
output ZN_0;

   `ifdef FUNCTIONAL  //  functional //

	nem_ohmux_invd0_10i_1b_func nem_ohmux_invd0_10i_1b_behav_inst(.I0_0(I0_0),.I1_0(I1_0),.I2_0(I2_0),.I3_0(I3_0),.I4_0(I4_0),.I5_0(I5_0),.I6_0(I6_0),.I7_0(I7_0),.I8_0(I8_0),.I9_0(I9_0),.S0(S0),.S1(S1),.S2(S2),.S3(S3),.S4(S4),.S5(S5),.S6(S6),.S7(S7),.S8(S8),.S9(S9),.ZN_0(ZN_0));
   `else

	nem_ohmux_invd0_10i_1b_func nem_ohmux_invd0_10i_1b_inst(.I0_0(I0_0),.I1_0(I1_0),.I2_0(I2_0),.I3_0(I3_0),.I4_0(I4_0),.I5_0(I5_0),.I6_0(I6_0),.I7_0(I7_0),.I8_0(I8_0),.I9_0(I9_0),.S0(S0),.S1(S1),.S2(S2),.S3(S3),.S4(S4),.S5(S5),.S6(S6),.S7(S7),.S8(S8),.S9(S9),.ZN_0(ZN_0));

	// spec_gates_begin


	// spec_gates_end



   specify

	// specify_block_begin 

	// comb arc I0_0 --> ZN_0
	 (I0_0 => ZN_0) = (1.0,1.0);

	// comb arc I1_0 --> ZN_0
	 (I1_0 => ZN_0) = (1.0,1.0);

	// comb arc I2_0 --> ZN_0
	 (I2_0 => ZN_0) = (1.0,1.0);

	// comb arc I3_0 --> ZN_0
	 (I3_0 => ZN_0) = (1.0,1.0);

	// comb arc I4_0 --> ZN_0
	 (I4_0 => ZN_0) = (1.0,1.0);

	// comb arc I5_0 --> ZN_0
	 (I5_0 => ZN_0) = (1.0,1.0);

	// comb arc I6_0 --> ZN_0
	 (I6_0 => ZN_0) = (1.0,1.0);

	// comb arc I7_0 --> ZN_0
	 (I7_0 => ZN_0) = (1.0,1.0);

	// comb arc I8_0 --> ZN_0
	 (I8_0 => ZN_0) = (1.0,1.0);

	// comb arc I9_0 --> ZN_0
	 (I9_0 => ZN_0) = (1.0,1.0);

	ifnone
	// comb arc posedge S0 --> (ZN_0:S0)
	 (posedge S0 => (ZN_0:S0)) = (1.0,1.0);

	ifnone
	// comb arc negedge S0 --> (ZN_0:S0)
	 (negedge S0 => (ZN_0:S0)) = (1.0,1.0);

	ifnone
	// comb arc posedge S1 --> (ZN_0:S1)
	 (posedge S1 => (ZN_0:S1)) = (1.0,1.0);

	ifnone
	// comb arc negedge S1 --> (ZN_0:S1)
	 (negedge S1 => (ZN_0:S1)) = (1.0,1.0);

	ifnone
	// comb arc posedge S2 --> (ZN_0:S2)
	 (posedge S2 => (ZN_0:S2)) = (1.0,1.0);

	ifnone
	// comb arc negedge S2 --> (ZN_0:S2)
	 (negedge S2 => (ZN_0:S2)) = (1.0,1.0);

	ifnone
	// comb arc posedge S3 --> (ZN_0:S3)
	 (posedge S3 => (ZN_0:S3)) = (1.0,1.0);

	ifnone
	// comb arc negedge S3 --> (ZN_0:S3)
	 (negedge S3 => (ZN_0:S3)) = (1.0,1.0);

	ifnone
	// comb arc posedge S4 --> (ZN_0:S4)
	 (posedge S4 => (ZN_0:S4)) = (1.0,1.0);

	ifnone
	// comb arc negedge S4 --> (ZN_0:S4)
	 (negedge S4 => (ZN_0:S4)) = (1.0,1.0);

	ifnone
	// comb arc posedge S5 --> (ZN_0:S5)
	 (posedge S5 => (ZN_0:S5)) = (1.0,1.0);

	ifnone
	// comb arc negedge S5 --> (ZN_0:S5)
	 (negedge S5 => (ZN_0:S5)) = (1.0,1.0);

	ifnone
	// comb arc posedge S6 --> (ZN_0:S6)
	 (posedge S6 => (ZN_0:S6)) = (1.0,1.0);

	ifnone
	// comb arc negedge S6 --> (ZN_0:S6)
	 (negedge S6 => (ZN_0:S6)) = (1.0,1.0);

	ifnone
	// comb arc posedge S7 --> (ZN_0:S7)
	 (posedge S7 => (ZN_0:S7)) = (1.0,1.0);

	ifnone
	// comb arc negedge S7 --> (ZN_0:S7)
	 (negedge S7 => (ZN_0:S7)) = (1.0,1.0);

	ifnone
	// comb arc posedge S8 --> (ZN_0:S8)
	 (posedge S8 => (ZN_0:S8)) = (1.0,1.0);

	ifnone
	// comb arc negedge S8 --> (ZN_0:S8)
	 (negedge S8 => (ZN_0:S8)) = (1.0,1.0);

	ifnone
	// comb arc posedge S9 --> (ZN_0:S9)
	 (posedge S9 => (ZN_0:S9)) = (1.0,1.0);

	ifnone
	// comb arc negedge S9 --> (ZN_0:S9)
	 (negedge S9 => (ZN_0:S9)) = (1.0,1.0);

	// specify_block_end 

   endspecify

   `endif 

endmodule
`endcelldefine


`celldefine
module nem_ohmux_invd0_2i_1b( I0_0, I1_0, S0, S1, ZN_0 );
input I0_0, I1_0, S0, S1;
output ZN_0;

   `ifdef FUNCTIONAL  //  functional //

	nem_ohmux_invd0_2i_1b_func nem_ohmux_invd0_2i_1b_behav_inst(.I0_0(I0_0),.I1_0(I1_0),.S0(S0),.S1(S1),.ZN_0(ZN_0));
   `else

	nem_ohmux_invd0_2i_1b_func nem_ohmux_invd0_2i_1b_inst(.I0_0(I0_0),.I1_0(I1_0),.S0(S0),.S1(S1),.ZN_0(ZN_0));

	// spec_gates_begin


	// spec_gates_end



   specify

	// specify_block_begin 

	// comb arc I0_0 --> ZN_0
	 (I0_0 => ZN_0) = (1.0,1.0);

	// comb arc I1_0 --> ZN_0
	 (I1_0 => ZN_0) = (1.0,1.0);

	ifnone
	// comb arc posedge S0 --> (ZN_0:S0)
	 (posedge S0 => (ZN_0:S0)) = (1.0,1.0);

	ifnone
	// comb arc negedge S0 --> (ZN_0:S0)
	 (negedge S0 => (ZN_0:S0)) = (1.0,1.0);

	ifnone
	// comb arc posedge S1 --> (ZN_0:S1)
	 (posedge S1 => (ZN_0:S1)) = (1.0,1.0);

	ifnone
	// comb arc negedge S1 --> (ZN_0:S1)
	 (negedge S1 => (ZN_0:S1)) = (1.0,1.0);

	// specify_block_end 

   endspecify

   `endif 

endmodule
`endcelldefine
